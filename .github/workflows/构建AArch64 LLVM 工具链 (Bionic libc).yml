name: 构建 LLVM (Bionic libc)
run-name: 为 r${{inputs.version}} 构建 ${{inputs.projects}}

on:
  workflow_dispatch:
    inputs:
      version:
        description: "NDK 版本号: "
        default: "28c"
        required: true
      projects:
        description: "需要构建的项目: "
        # bolt;clang;clang-tools-extra;compiler-rt;cross-project-tests;libc;libclc;lld;lldb;mlir;openmp;polly;pstl;flang
        default: "bolt;clang;clang-tools-extra;lld"
        required: true

permissions:
  contents: write
  actions: write

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        target: [aarch64-linux-android]   # 仅保留 AArch64
    runs-on: ubuntu-24.04
    env:
      ANDROID_PLATFORM: 25
      ROOTDIR: ${{github.workspace}}
      GOOGLE_LLVM_URL: https://android.googlesource.com/toolchain/llvm-project
      TARGET_BUILD_DIR: ${{github.workspace}}/build/${{matrix.target}}
      TARGET_INSTALL_DIR: ${{github.workspace}}/output/${{matrix.target}}
    steps:
      - name: 最大化可用磁盘空间
        uses: easimon/maximize-build-space@v10
        with:
          root-reserve-mb: 5120
          swap-size-mb: 5120
          remove-dotnet: true
          remove-android: true
          remove-haskell: true
          remove-codeql: true
          remove-docker-images: true

      - name: 检出仓库 (llvm-custom)
        uses: actions/checkout@v4
        with:
          path: ${{github.workspace}}

      - name: 检出 llvm-project 并应用 Android 补丁
        run: |
          set -euo pipefail
          NDK_DIR="$ROOTDIR/android-ndk-r${{inputs.version}}"
          LLVM_BIN="$NDK_DIR/toolchains/llvm/prebuilt/linux-x86_64/bin"
          CLANG_VERSION_CMD="$LLVM_BIN/clang --version"
          CLANG_SOURCE_INFO="$NDK_DIR/toolchains/llvm/prebuilt/linux-x86_64/clang_source_info.md"

          echo "正在下载 NDK r${{inputs.version}} ..."
          curl -sSfL -o android-ndk.zip "https://dl.google.com/android/repository/android-ndk-r${{inputs.version}}-linux.zip"
          unzip -qq android-ndk.zip -d "$ROOTDIR"

          echo "========== 官方 clang --version 原样输出 =========="
          "$LLVM_BIN/clang" --version || true
          echo "==================================================="

          # 把整行揉成一行，避免换行/换段影响正则匹配
          VERLINE=$("$LLVM_BIN/clang" --version | tr '\n' ' ')

          echo "解析 clang/llvm 版本与提交信息 ..."
          # 版本号（如 19.0.1 或 19.0.1git）
          LLVM_VERSION=$(printf "%s" "$VERLINE" | sed -n 's/.*clang version \([0-9][0-9.]*[A-Za-z0-9]*\).*/\1/p')

          # 官方 vendor 前缀：抓取以 Android 开头到右括号为止（含空格结尾）
          VENDOR_PREFIX=$(printf "%s" "$VERLINE" | sed -n 's/.*\(Android[^)]*)\) clang version.*/\1 /p')

          # 仓库 URL 与提交哈希（最后一对括号里通常是 "<url> <hash>"）
          LLVM_REPO=$(printf "%s" "$VERLINE" | sed -n 's/.*( *\([^ )]*android\.googlesource\.com[^ )]*\) *[0-9a-f]\{7,40\} *).*/\1/p')
          LLVM_REV=$(printf "%s" "$VERLINE" | sed -n 's/.*( *[^ )]* *\([0-9a-f]\{7,40\}\) *).*/\1/p')

          # ANDROID_REV 主要用于拉 llvm_android 补丁；不同 rXX 包路径可能微调，先做存在性判断
          ANDROID_REV=""
          if [[ -f "$CLANG_SOURCE_INFO" ]]; then
            ANDROID_REV=$(grep -oE 'llvm_android/\+[0-9a-f]+' "$CLANG_SOURCE_INFO" | head -n1 | sed 's#.*/\+##' || true)
          fi
          if [[ "${{inputs.version}}" == "29-beta3" && -z "${ANDROID_REV}" ]]; then
            ANDROID_REV="d113e48090fad0f0ab54ab8a32eb118a41867fce"
          fi

          # 兜底：若 vendor/repo 仍为空，用更宽松的 grep 再试一次
          if [[ -z "${VENDOR_PREFIX}" ]]; then
            VENDOR_PREFIX=$("$LLVM_BIN/clang" --version | head -n1 | grep -oE '^Android[^)]*\)' | sed 's/$/ /' || true)
          fi
          if [[ -z "${LLVM_REPO}" || -z "${LLVM_REV}" ]]; then
            # 从括号对内最后一次出现的 android.googlesource.com 提取
            PAREN_BLOCK=$("$LLVM_BIN/clang" --version | tr '\n' ' ' | grep -oE '\([^)]*android\.googlesource\.com[^)]*\)' | tail -n1 | sed 's/[()]//g' || true)
            # 期望形如 "<url> <hexhash>"
            LLVM_REPO=$(printf "%s" "$PAREN_BLOCK" | awk '{print $1}' || true)
            LLVM_REV=$(printf "%s" "$PAREN_BLOCK" | awk '{print $2}' || true)
          fi

          echo "解析结果："
          echo "  LLVM_VERSION   = ${LLVM_VERSION:-<empty>}"
          echo "  VENDOR_PREFIX  = ${VENDOR_PREFIX:-<empty>}"
          echo "  LLVM_REPO      = ${LLVM_REPO:-<empty>}"
          echo "  LLVM_REV       = ${LLVM_REV:-<empty>}"
          echo "  ANDROID_REV    = ${ANDROID_REV:-<empty>}"

          # 严格校验（vendor/repo/rev/版本 必须拿到）
          if [[ -z "${LLVM_VERSION:-}" || -z "${VENDOR_PREFIX:-}" || -z "${LLVM_REPO:-}" || -z "${LLVM_REV:-}" ]]; then
            echo "错误: 解析失败。请把上面“官方 clang --version 原样输出”贴给我。"
            exit 1
          fi

          echo "下载 LLVM 源码 (提交 $LLVM_REV)..."
          curl -sSfL -o llvm-project.tar.gz "$GOOGLE_LLVM_URL/+archive/$LLVM_REV.tar.gz"
          tar -xf llvm-project.tar.gz
          rm llvm-project.tar.gz

          # 只有能拿到 ANDROID_REV 才应用补丁；拿不到就跳过（不影响 -v 一致性）
          if [[ -n "${ANDROID_REV}" ]]; then
            echo "克隆 llvm_android (提交 $ANDROID_REV)..."
            git clone --quiet https://android.googlesource.com/toolchain/llvm_android ../llvm_android
            ( cd ../llvm_android && git checkout --quiet "$ANDROID_REV" )
            echo "应用 llvm_android 补丁 ..."
            mapfile -t PATCHES < <(grep -oP 'patches/\S+' "$CLANG_SOURCE_INFO" 2>/dev/null | sed 's/)$//') || true
            for PATCH in "${PATCHES[@]:-}"; do
              echo "应用补丁: $(basename "$PATCH") ..."
              if [[ -f "$ROOTDIR/../llvm_android/$PATCH" ]]; then
                git apply "$ROOTDIR/../llvm_android/$PATCH" || true
              elif [[ -f "$ROOTDIR/../llvm_android/cherry/$PATCH" ]]; then
                git apply "$ROOTDIR/../llvm_android/cherry/$PATCH" || true
              fi
            done
            rm -rf "$ROOTDIR/../llvm_android"
          else
            echo "警告: 未找到 ANDROID_REV，跳过 llvm_android 补丁（仅影响源码一致性，不影响 -v 文本注入）"
          fi

          echo "应用仓库内全局补丁 (按 LLVM 版本匹配)..."
          shopt -s nullglob
          for PATCH in "$ROOTDIR/patches/global/llvm/$LLVM_VERSION"/*.patch; do
            echo "应用补丁: $(basename "$PATCH") ..."
            git apply "$PATCH" || true
          done
          shopt -u nullglob

          # 兼容 Android 的小修正
          sed -i '/^#if defined(__x86_64__) \&\& defined(__ELF__) \&\& defined(__linux__)$/ {
            /&& !defined(__ANDROID__)/! s/$/ \&\& !defined(__ANDROID__)/
          }' "$ROOTDIR/llvm/tools/llvm-rtdyld/llvm-rtdyld.cpp" || true

          # 把解析到的 vendor/repo/rev 存成临时文件，给后面的 CMake 用
          echo "$VENDOR_PREFIX" > "$ROOTDIR/.parsed_vendor"
          echo "$LLVM_REPO"     > "$ROOTDIR/.parsed_repo"
          echo "$LLVM_REV"      > "$ROOTDIR/.parsed_rev"

          echo "补丁/解析阶段完成"

      - name: 安装依赖
        run: |
          echo "安装构建依赖 (ninja)..."
          sudo apt update -y
          sudo apt install -y ninja-build

      - name: 构建依赖库 (zlib/zstd, 静态)
        run : |
          set -euo pipefail
          ANDROID_PLATFORM=${ANDROID_PLATFORM}
          TOOLCHAIN=$ROOTDIR/android-ndk-r${{inputs.version}}/toolchains/llvm/prebuilt/linux-x86_64

          export CC=${TOOLCHAIN}/bin/${{matrix.target}}${ANDROID_PLATFORM}-clang
          export CXX=${TOOLCHAIN}/bin/${{matrix.target}}${ANDROID_PLATFORM}-clang++
          export CFLAGS="-fstack-protector-strong"
          export CXXFLAGS="-fstack-protector-strong"
          export LD=${TOOLCHAIN}/bin/ld
          export OBJCOPY=${TOOLCHAIN}/bin/llvm-objcopy
          export AR=${TOOLCHAIN}/bin/llvm-ar
          export RANLIB=${TOOLCHAIN}/bin/llvm-ranlib
          export STRIP=${TOOLCHAIN}/bin/llvm-strip

          echo "清理旧的构建输出 ..."
          rm -rf build output/ zlib/ zstd/

          if ! test -f "${TARGET_INSTALL_DIR}"/lib/libz.a; then
              echo "构建 zlib-1.3.1 (静态) ..."
              if ! test -d zlib; then
                  curl -LkSs https://github.com/madler/zlib/releases/download/v1.3.1/zlib-1.3.1.tar.xz | xz -d | tar -x
                  mv zlib-1.3.1 zlib
              fi
              mkdir -p "${TARGET_BUILD_DIR}"/zlib
              (
                  cd ${ROOTDIR}/zlib
                  ./configure --prefix="${TARGET_INSTALL_DIR}" --static
                  make -j"$(nproc --all)" install
              )
          else
              echo "跳过 zlib (已存在)"
          fi

          if ! test -f "${TARGET_INSTALL_DIR}"/lib/libzstd.a; then
              echo "构建 zstd-1.5.6 (静态，最小必要对象) ..."
              if ! test -d zstd; then
                  curl https://github.com/facebook/zstd/archive/refs/tags/v1.5.6.tar.gz -LkSs | gzip -d | tar -x
                  mv zstd-1.5.6 zstd
              fi

              mkdir -p "${TARGET_INSTALL_DIR}/include"
              mkdir -p "${TARGET_INSTALL_DIR}/lib"
              mkdir -p "${TARGET_BUILD_DIR}/zstd"

              cp "${ROOTDIR}/zstd/lib/zstd.h" "$TARGET_INSTALL_DIR/include/zstd.h"
              (
                  cd "${TARGET_BUILD_DIR}/zstd"
                  $CC $CFLAGS -c \
                      "${ROOTDIR}/zstd/lib/decompress/zstd_ddict.c" \
                      "${ROOTDIR}/zstd/lib/decompress/zstd_decompress.c" \
                      "${ROOTDIR}/zstd/lib/decompress/huf_decompress.c" \
                      "${ROOTDIR}/zstd/lib/decompress/huf_decompress_amd64.S" \
                      "${ROOTDIR}/zstd/lib/decompress/zstd_decompress_block.c" \
                      "${ROOTDIR}/zstd/lib/compress/zstdmt_compress.c" \
                      "${ROOTDIR}/zstd/lib/compress/zstd_opt.c" \
                      "${ROOTDIR}/zstd/lib/compress/hist.c" \
                      "${ROOTDIR}/zstd/lib/compress/zstd_ldm.c" \
                      "${ROOTDIR}/zstd/lib/compress/zstd_fast.c" \
                      "${ROOTDIR}/zstd/lib/compress/zstd_compress_literals.c" \
                      "${ROOTDIR}/zstd/lib/compress/zstd_double_fast.c" \
                      "${ROOTDIR}/zstd/lib/compress/huf_compress.c" \
                      "${ROOTDIR}/zstd/lib/compress/fse_compress.c" \
                      "${ROOTDIR}/zstd/lib/compress/zstd_lazy.c" \
                      "${ROOTDIR}/zstd/lib/compress/zstd_compress.c" \
                      "${ROOTDIR}/zstd/lib/compress/zstd_compress_sequences.c" \
                      "${ROOTDIR}/zstd/lib/compress/zstd_compress_superblock.c" \
                      "${ROOTDIR}/zstd/lib/deprecated/zbuff_compress.c" \
                      "${ROOTDIR}/zstd/lib/deprecated/zbuff_decompress.c" \
                      "${ROOTDIR}/zstd/lib/deprecated/zbuff_common.c" \
                      "${ROOTDIR}/zstd/lib/common/entropy_common.c" \
                      "${ROOTDIR}/zstd/lib/common/pool.c" \
                      "${ROOTDIR}/zstd/lib/common/threading.c" \
                      "${ROOTDIR}/zstd/lib/common/zstd_common.c" \
                      "${ROOTDIR}/zstd/lib/common/xxhash.c" \
                      "${ROOTDIR}/zstd/lib/common/debug.c" \
                      "${ROOTDIR}/zstd/lib/common/fse_decompress.c" \
                      "${ROOTDIR}/zstd/lib/common/error_private.c" \
                      "${ROOTDIR}/zstd/lib/dictBuilder/zdict.c" \
                      "${ROOTDIR}/zstd/lib/dictBuilder/divsufsort.c" \
                      "${ROOTDIR}/zstd/lib/dictBuilder/fastcover.c" \
                      "${ROOTDIR}/zstd/lib/dictBuilder/cover.c"

                  $AR rcs "${TARGET_INSTALL_DIR}/lib/libzstd.a" "${TARGET_BUILD_DIR}"/zstd/*.o
              )
          else
              echo "跳过 zstd (已存在)"
          fi

      - name: 构建 LLVM/Clang/LLD
        run: |
          set -euo pipefail
          ANDROID_PLATFORM=${ANDROID_PLATFORM}
          ANDROID_NDK_HOME=$ROOTDIR/android-ndk-r${{inputs.version}}
          ANDROID_NDK_ROOT=$ANDROID_NDK_HOME
          TOOLCHAIN=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64

          echo "生成构建配置 (CMake) ..."
          cmake -S "$ROOTDIR/llvm" -B "${TARGET_BUILD_DIR}" -G Ninja \
            -DCMAKE_INSTALL_PREFIX="${ROOTDIR}/llvm-${{matrix.target}}" \
            -DCMAKE_PREFIX_PATH="${TARGET_INSTALL_DIR}" \
            -DLLVM_TARGETS_TO_BUILD="X86;AArch64;ARM;RISCV" \
            -DCMAKE_BUILD_TYPE=MinSizeRel \
            -DCMAKE_CROSSCOMPILING=True \
            -DCMAKE_SYSTEM_NAME=Linux \
            -DLLVM_DEFAULT_TARGET_TRIPLE=${{matrix.target}}${ANDROID_PLATFORM} \
            -DCMAKE_C_COMPILER="${TOOLCHAIN}/bin/${{matrix.target}}${ANDROID_PLATFORM}-clang" \
            -DCMAKE_CXX_COMPILER="${TOOLCHAIN}/bin/${{matrix.target}}${ANDROID_PLATFORM}-clang++" \
            -DCMAKE_ASM_COMPILER="${TOOLCHAIN}/bin/${{matrix.target}}${ANDROID_PLATFORM}-clang" \
            -DCMAKE_LINKER="${TOOLCHAIN}/bin/ld" \
            -DCMAKE_OBJCOPY="${TOOLCHAIN}/bin/llvm-objcopy" \
            -DCMAKE_AR="${TOOLCHAIN}/bin/llvm-ar" \
            -DCMAKE_RANLIB="${TOOLCHAIN}/bin/llvm-ranlib" \
            -DCMAKE_STRIP="${TOOLCHAIN}/bin/llvm-strip" \
            -DCMAKE_C_FLAGS="-fstack-protector-strong" \
            -DCMAKE_CXX_FLAGS="-fstack-protector-strong" \
            -DLLVM_ENABLE_PROJECTS="${{inputs.projects}}" \
            -DLLVM_ENABLE_ZLIB=FORCE_ON \
            -DLLVM_ENABLE_ZSTD=FORCE_ON \
            -Dzstd_LIBRARY="${TARGET_INSTALL_DIR}/lib/libzstd.a" \
            -Dzstd_INCLUDE_DIR="${TARGET_INSTALL_DIR}/include" \
            -DLLVM_USE_STATIC_ZSTD=ON \
            -DLLVM_BUILD_STATIC=ON \
            -DCLANG_ENABLE_ARCMT=OFF \
            -DLLVM_LINK_LLVM_DYLIB=OFF \
            -DLIBCLANG_BUILD_STATIC=ON \
            -DCMAKE_SKIP_INSTALL_RPATH=TRUE \
            -DBUILD_SHARED_LIBS=OFF \
            -DLLVM_INCLUDE_BENCHMARKS=OFF \
            -DLLVM_BUILD_BENCHMARKS=OFF \
            -DLLVM_INCLUDE_EXAMPLES=OFF \
            -DLLVM_BUILD_EXAMPLES=OFF \
            -DLLVM_BUILD_TESTS=OFF \
            -DLLVM_BUILD_TOOLS=ON \
            -DLLVM_INCLUDE_TESTS=OFF \
            -DCLANG_INCLUDE_TESTS=OFF \
            -DCLANG_BUILD_TESTS=OFF \
            -DLLVM_TOOL_C_TEST_BUILD=OFF \
            -DCLANG_TOOL_CLANG_IMPORT_TEST_BUILD=OFF \
            -DCLANG_TOOL_APINOTES_TEST_BUILD=OFF \
            -DCLANG_TOOL_ARCMT_TEST_BUILD=OFF \
            -DCLANG_TOOL_C_ARCMT_TEST_BUILD=OFF \
            -DCLANG_TOOL_C_INDEX_TEST_BUILD=OFF \
            -DLLVM_PARALLEL_LINK_JOBS=1 \
            -DLLVM_ENABLE_PIC=OFF \
            -DLLVM_ENABLE_LIBCXX=OFF \
            -DLLVM_ENABLE_LLVM_LIBC=OFF \
            -DLLVM_ENABLE_UNWIND_TABLES=OFF \
            -DLLVM_ENABLE_EH=OFF \
            -DLLVM_ENABLE_RTTI=OFF \
            -DLLVM_ENABLE_LTO=OFF \
            -DLLVM_ENABLE_TERMINFO=OFF \
            -DLLVM_ENABLE_MODULES=OFF \
            -DLLVM_ENABLE_PEDANTIC=OFF \
            -DLLVM_ENABLE_FFI=OFF \
            -DLLVM_ENABLE_LIBPFM=OFF \
            -DLLVM_ENABLE_LIBEDIT=OFF \
            -DLLVM_ENABLE_LIBXML2=OFF \
            -DLLVM_ENABLE_CURL=OFF \
            -DLLVM_ENABLE_THREADS=ON \
            -DLLVM_VERSION_SUFFIX="" \
            -DCLANG_VENDOR="$(cat "$ROOTDIR/.parsed_vendor")" \
            -DCLANG_REPOSITORY_STRING="$(cat "$ROOTDIR/.parsed_repo") $(cat "$ROOTDIR/.parsed_rev")" \
            -DLLVM_FORCE_VC_REPOSITORY="$(cat "$ROOTDIR/.parsed_repo")" \
            -DLLVM_FORCE_VC_REVISION="$(cat "$ROOTDIR/.parsed_rev")"


          echo "开始构建并安装 ..."
          cmake --build "${TARGET_BUILD_DIR}" --target install

      - name: 去除调试符号并检查
        run: |
          set -euo pipefail
          echo "Strip 可执行文件以减小体积 ..."
          find "llvm-${{matrix.target}}/bin" -type f ! -lname '*' | while IFS= read -r file; do
            if file "$file" | grep -q ELF; then
              "$ROOTDIR/android-ndk-r${{inputs.version}}/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-strip" -s "$file"
            fi
          done
          echo "文件类型: "
          file llvm-${{matrix.target}}/bin/* || true
          echo "目录结构: "
          tree -a -L 2 llvm-${{matrix.target}} || true

      - name: 打包
        run: |
          set -euo pipefail
          projects=$(echo "${{inputs.projects}}" | tr ";" "+")
          tarball_name=${projects}-r${{inputs.version}}-${{matrix.target}}
          echo tarball_name=${tarball_name} >> ${GITHUB_ENV}
          echo "重命名输出目录为: ${tarball_name}"
          mv "llvm-${{matrix.target}}" "${tarball_name}"
          echo "生成压缩包 ..."
          tar -c "${tarball_name}" | xz -T0 -v >"${tarball_name}.tar.xz"
          echo "打包完成: ${tarball_name}.tar.xz"

      - name: 上传构建产物
        uses: actions/upload-artifact@v4
        with:
          name: ${{env.tarball_name}}
          path: ${{env.tarball_name}}.tar.xz
          retention-days: 7
